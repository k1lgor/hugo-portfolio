<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash | Portfolio</title><link>https://k1lgor.github.io/hugo-portfolio/tag/bash/</link><atom:link href="https://k1lgor.github.io/hugo-portfolio/tag/bash/index.xml" rel="self" type="application/rss+xml"/><description>Bash</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 22 Apr 2023 00:00:00 +0000</lastBuildDate><image><url>https://k1lgor.github.io/hugo-portfolio/media/icon_hucdc783dfe6b607fdadcda92cca688f51_1481_512x512_fill_lanczos_center_3.png</url><title>Bash</title><link>https://k1lgor.github.io/hugo-portfolio/tag/bash/</link></image><item><title>Understanding Linux Commands</title><link>https://k1lgor.github.io/hugo-portfolio/post/linux-commands/</link><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid>https://k1lgor.github.io/hugo-portfolio/post/linux-commands/</guid><description>&lt;hr>
&lt;h3 id="introduction">&lt;em>&lt;strong>Introduction&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>If you’re new to Linux or have recently switched to it, you may have been overwhelmed by the vast array of commands you can use within it. These commands have a different syntax than those you might be used to in Windows or Mac systems; however, once you have an understanding of how they work, using Linux commands becomes easy and straightforward.&lt;/p>
&lt;p>In this article, we’ll provide you with a comprehensive guide on complex Linux commands. We’ll explain what they are, how they work, and how you can use them to optimize your work processes. Let&amp;rsquo;s get started!&lt;/p>
&lt;h3 id="what-are-linux-commands">&lt;em>&lt;strong>What are Linux Commands?&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Linux commands are text-based instructions that you can use within a Linux terminal. They can help you to execute specific tasks and communicate with your computer&amp;rsquo;s operating system. The terminal is a text-based interface that you can access by typing in specific commands. You can achieve several tasks, such as copying files, starting programs, or updating your system, using only commands.&lt;/p>
&lt;h3 id="basic-linux-commands">&lt;em>&lt;strong>Basic Linux Commands&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Let’s begin with some basic commands. These commands are used frequently and are an essential part of mastering the Linux terminal.&lt;/p>
&lt;ol>
&lt;li>&lt;code>ls&lt;/code>: This command lists all the files and directories in your current location. You can use the &lt;code>-a&lt;/code> option to display hidden files, and the &lt;code>-l&lt;/code> option to display them in long format.&lt;/li>
&lt;li>&lt;code>cd&lt;/code>: The &lt;code>cd&lt;/code> command is used to change directories. For example, &lt;code>cd Downloads&lt;/code> will take you to the Downloads directory.&lt;/li>
&lt;li>&lt;code>pwd&lt;/code>: This command displays the working directory in your terminal.&lt;/li>
&lt;li>&lt;code>mkdir&lt;/code>: The &lt;code>mkdir&lt;/code> command is used to make a new directory. For example, to create a folder called ‘test’, you can use the command &lt;code>mkdir test&lt;/code>.&lt;/li>
&lt;li>&lt;code>rm&lt;/code>: The &lt;code>rm&lt;/code> command is used to remove files, and it&amp;rsquo;s often used with the &lt;code>-rf&lt;/code> option to remove directories.&lt;/li>
&lt;li>&lt;code>cp&lt;/code>: This command is used to copy files and directories from one location to another.&lt;/li>
&lt;li>&lt;code>mv&lt;/code>: This command is used to move files and directories from one location to another.&lt;/li>
&lt;/ol>
&lt;h3 id="intermediate-linux-commands">&lt;em>&lt;strong>Intermediate Linux Commands&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Now that you are familiar with some basic Linux commands let&amp;rsquo;s look at a few intermediate level commands to enhance your Linux knowledge.&lt;/p>
&lt;ol>
&lt;li>&lt;code>grep&lt;/code>: This command is used to search for a specific word or pattern within a file. For example, to look for the word ‘example’ in a file called ‘file.txt’, you can run the command &lt;code>grep example file.txt&lt;/code>.&lt;/li>
&lt;li>&lt;code>find&lt;/code>: The &lt;code>find&lt;/code> command is used to search through a directory&amp;rsquo;s contents recursively. You can use it with different options such as &lt;code>-name&lt;/code> to specify filenames or &lt;code>-size&lt;/code> to search for specific file sizes.&lt;/li>
&lt;li>&lt;code>ps&lt;/code>: The &lt;code>ps&lt;/code> command lets you view the currently running processes on your system. You can use it with different options such as &lt;code>-ef&lt;/code> to display all processes.&lt;/li>
&lt;li>&lt;code>wget&lt;/code>: The &lt;code>wget&lt;/code> command lets you download files from the internet. For example, to download a file called &lt;code>test.txt&lt;/code>, you can use &lt;code>wget https://www.example.com/test.txt&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="advanced-linux-commands">&lt;em>&lt;strong>Advanced Linux Commands&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Here are few advanced Linux commands that are rarely used but can be helpful in certain situations.&lt;/p>
&lt;ol>
&lt;li>&lt;code>dd&lt;/code>: The &lt;code>dd&lt;/code> command is used to copy and convert data. For example, to create a bootable USB drive using an ISO file, you can use the command &lt;code>sudo dd if=path/to/iso of=/dev/sdb bs=4M; sync&lt;/code>. Make sure to use the correct input and output file locations.&lt;/li>
&lt;li>&lt;code>tar&lt;/code>: The &lt;code>tar&lt;/code> command is used to create compressed archives. For example, to create a &lt;code>.tar.gz&lt;/code> archive of all files in the current directory, you can use the command &lt;code>tar -czvf archive_name.tar.gz *&lt;/code>.&lt;/li>
&lt;li>&lt;code>awk&lt;/code>: The &lt;code>awk&lt;/code> command is used to manipulate text files. For example, to print the first column of a tab-separated values file, you can run the command &lt;code>awk -F'\t' '{print $1}' file.txt&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="security-focused-linux-commands">&lt;em>&lt;strong>Security-focused Linux Commands&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Linux commands are powerful tools that can be used to perform various security-focused tasks such as user management, file permissions, and network security. In this section, we will take a look at some of the most commonly used security-focused Linux commands.&lt;/p>
&lt;ol>
&lt;li>&lt;code>chmod&lt;/code>: This command is used to change the permissions of a file or directory. The permissions can be specified using a numerical code or a symbolic code.&lt;/li>
&lt;li>&lt;code>passwd&lt;/code>: This command is used to change the password of a user account. The user is prompted to enter their old password, followed by their new password.&lt;/li>
&lt;li>&lt;code>sftp&lt;/code>: This command is used to securely transfer files over the network. It uses the SSH protocol to encrypt the data being transferred.&lt;/li>
&lt;li>&lt;code>iptables&lt;/code>: This command is used to manage network security by setting up rules for incoming and outgoing traffic. It can be used to block specific IP addresses or protocols.&lt;/li>
&lt;li>&lt;code>ssh&lt;/code>: This command is used to establish a secure remote connection to another computer. It uses the SSH protocol to encrypt the data being transferred.&lt;/li>
&lt;/ol>
&lt;p>By using these security-focused Linux commands, you can help protect your computer and network from potential security threats.&lt;/p>
&lt;h3 id="conclusion">&lt;em>&lt;strong>Conclusion&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Linux commands can seem intimidating, but once you know how they work, they become extremely useful tools. We hope this guide provided a good starting point for mastering Linux commands. Keep practicing, and you&amp;rsquo;ll soon be using Linux like a pro!&lt;/p>
&lt;p>If you want to learn more about Linux, check out the &lt;a href="https://www.tldp.org/" target="_blank" rel="noopener">Linux Documentation Project&lt;/a> or join the &lt;a href="https://www.reddit.com/r/linux/" target="_blank" rel="noopener">Linux subreddit&lt;/a> to connect with other users. Happy coding!&lt;/p>
&lt;p>&lt;em>&lt;strong>Thank you for reading&lt;/strong>&lt;/em> 🧑‍💻&lt;/p>
&lt;p>&lt;em>&lt;strong>Stay tuned for more&lt;/strong>&lt;/em> 🚀&lt;/p>
&lt;p>✌️ and &lt;em>&lt;strong>logout&lt;/strong>&lt;/em>&lt;/p>
&lt;a href="https://www.buymeacoffee.com/k1lgor" target="_blank">
&lt;img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 60px !important;width: 217px !important;" >
&lt;/a></description></item><item><title>Mastering the ssh Command</title><link>https://k1lgor.github.io/hugo-portfolio/post/ssh/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://k1lgor.github.io/hugo-portfolio/post/ssh/</guid><description>&lt;hr>
&lt;h3 id="introduction">&lt;em>&lt;strong>Introduction&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>If you&amp;rsquo;ve ever needed to remotely access another computer, then you&amp;rsquo;re probably familiar with the &amp;lsquo;ssh&amp;rsquo; command. This powerful tool is used to securely connect to and manage remote systems, and it can be incredibly helpful for system administrators, developers, and anyone who needs to work on a remote machine. In this blog post, we&amp;rsquo;ll explore some tips and tricks for using the &amp;lsquo;ssh&amp;rsquo; command like a pro.&lt;/p>
&lt;h3 id="basic-usage">&lt;em>&lt;strong>Basic Usage&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Before we dive into some more advanced features, let&amp;rsquo;s review the basic usage of the &lt;code>ssh&lt;/code> command. To establish an SSH connection, simply type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh username@hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Replace &lt;code>username&lt;/code> with your username on the remote system, and &lt;code>hostname&lt;/code> with the IP address or domain name of the remote system. You may also need to specify a port number using the &lt;code>-p&lt;/code> flag if the SSH server is running on a non-standard port.&lt;/p>
&lt;p>Once you enter this command, you&amp;rsquo;ll be prompted to enter your password for the remote system. If everything goes well, you&amp;rsquo;ll be connected to the remote machine and can start running commands as if you were logged in locally.&lt;/p>
&lt;h3 id="advanced-usage">&lt;em>&lt;strong>Advanced Usage&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve covered the basics, let&amp;rsquo;s take a look at some more advanced features of the &lt;code>ssh&lt;/code> command.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Publick Key Authentication&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Typing in your password every time you want to connect to a remote system can be a hassle, but luckily &lt;code>ssh&lt;/code> supports public key authentication. This allows you to log in without typing your password, as long as you have a public key installed on the remote system. Here&amp;rsquo;s how to set it up:&lt;/p>
&lt;ul>
&lt;li>Generate a public/private key pair on your local machine using the &lt;code>ssh-keygen&lt;/code> command. Make sure to keep your private key safe and secure.&lt;/li>
&lt;li>Copy your public key to the remote system using the &lt;code>ssh-copy-id&lt;/code> command. This will automatically add your public key to the remote system&amp;rsquo;s authorized keys list.&lt;/li>
&lt;li>Now, when you connect to the remote system, you should be able to log in without typing your password.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>Proxying Connections&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Sometimes, you may need to connect to a remote system through an intermediate server. This is where proxying comes in handy. To set up a proxy connection, use the &lt;code>-J&lt;/code> flag followed by the hostname of the intermediate server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -J username@intermediate_host username@destination_host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will establish a connection to the intermediate server first, and then to the final destination.&lt;/p>
&lt;ol start="3">
&lt;li>&lt;strong>Port Forwarding&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Port forwarding is a way to forward network traffic from one port on your local machine to a port on a remote machine, through an SSH tunnel. This can be incredibly helpful for accessing services that are not available directly from your local network. Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh -L 8080:localhost:80 username@remote_host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will forward all traffic from port 8080 on your local machine to port 80 on the remote host. Now, if you open a web browser on your local machine and navigate to &lt;code>localhost:8080&lt;/code>, you&amp;rsquo;ll see the website that&amp;rsquo;s hosted on the remote machine.&lt;/p>
&lt;h3 id="conclusion">&lt;em>&lt;strong>Conclusion&lt;/strong>&lt;/em>&lt;/h3>
&lt;p>The &lt;code>ssh&lt;/code> command is a powerful tool that can be incredibly helpful for managing remote systems. By mastering some of the advanced features we&amp;rsquo;ve covered in this blog post, you&amp;rsquo;ll be able to work more efficiently and securely on remote machines. Whether you&amp;rsquo;re a system administrator or a developer, understanding the &lt;code>ssh&lt;/code> command is an essential skill for anyone who needs to work with remote systems.&lt;/p>
&lt;p>&lt;em>&lt;strong>Thank you for reading&lt;/strong>&lt;/em> 🧑‍💻&lt;/p>
&lt;p>&lt;em>&lt;strong>Stay tuned for more&lt;/strong>&lt;/em> 🚀&lt;/p>
&lt;p>✌️ and &lt;em>&lt;strong>logout&lt;/strong>&lt;/em>&lt;/p>
&lt;a href="https://www.buymeacoffee.com/k1lgor" target="_blank">
&lt;img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 60px !important;width: 217px !important;" >
&lt;/a></description></item><item><title>HackerRank</title><link>https://k1lgor.github.io/hugo-portfolio/project/hackerrank/</link><pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate><guid>https://k1lgor.github.io/hugo-portfolio/project/hackerrank/</guid><description/></item><item><title>MAC changer</title><link>https://k1lgor.github.io/hugo-portfolio/project/macchanger/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://k1lgor.github.io/hugo-portfolio/project/macchanger/</guid><description>&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>To get started with &lt;code>macchanger&lt;/code>, follow the steps below:&lt;/p>
&lt;ol>
&lt;li>Clone the repository to your local machine:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/k1lgor/macchanger.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Change into &lt;code>macchanger&lt;/code> directory:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> macchanger
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Make the script executable:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">chmod +x macchanger.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Execute the script with sudo:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo ./macchanger.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will run the macchanger script with administrative privileges.&lt;/p>
&lt;h2 id="compatability">Compatability&lt;/h2>
&lt;p>The macchanger script is compatible with the following Linux distributions:&lt;/p>
&lt;ul>
&lt;li>Arch Linux&lt;/li>
&lt;li>Debian-based distributions (e.g., Ubuntu)&lt;/li>
&lt;li>Red Hat Enterprise Linux (RHEL)&lt;/li>
&lt;li>Fedora&lt;/li>
&lt;li>openSUSE-based distributions&lt;/li>
&lt;/ul>
&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;p>The script checks for the presence of &lt;code>ifconfig&lt;/code> and &lt;code>macchanger&lt;/code> commands and installs them if they are not already available on your system. These dependencies are necessary for macchanger to function properly.&lt;/p></description></item><item><title>WiFi DoS</title><link>https://k1lgor.github.io/hugo-portfolio/project/wifi-dos/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://k1lgor.github.io/hugo-portfolio/project/wifi-dos/</guid><description>&lt;h2 id="simple-wifi-dos-attack">Simple WiFi DoS Attack&lt;/h2>
&lt;p>This repository provides a simple script for conducting a Denial-of-Service (DoS) attack on WiFi networks. The attack utilizes the following tools:&lt;/p>
&lt;ul>
&lt;li>nmcli - Network Manager Command Line Interface&lt;/li>
&lt;li>macchanger - a utility that simplifies the manipulation of MAC addresses of network interfaces&lt;/li>
&lt;li>aircrack-ng - a comprehensive suite of tools for assessing WiFi network security&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Follow the steps below to execute the DoS attack:&lt;/p>
&lt;ol>
&lt;li>Change the permission of the script file to make it executable:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">chmod +x wifi-dos.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Use the following command to view all the networkds within the range of your WiFi adapter:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nmcli dev wifi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Copy the target SSID and the corresponding channel number, and replace the values in the script.&lt;/li>
&lt;li>Execute the script with sudo, as aircrack-ng requires administrative privileges:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo ./wifi-dos.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="demo">Demo&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./featured.gif" alt="Demo" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>This script is intended for educational purpose only.
The author is not responsible for any malicious use of the content.&lt;/p></description></item></channel></rss>